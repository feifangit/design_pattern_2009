// 设计模式.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"


#include "state.h"
#include "iterator.h"

int _tmain(int argc, _TCHAR* argv[])
{
	//简单工厂
	//#include "simpleFactory.h"
	//egSimpleFactory();

	//工厂
// 	#include "factory.h"
// 	egFactory();

	//抽象工厂
// #include "abstractFactory.h"
// 	egAbstractFactory();

	//适配器
// #include "adapter.h"
// 	egAdapter();

	//桥
// #include "bridge.h"
// 	egBridge();

	//策略
// #include "policy.h"
// 	egPolicy();

	//装饰模式
// #include "decorator.h"
// 	egDecorator();

	//代理模式
// #include "proxy.h"
// 	egProxy();

	//原型模式
// #include "prototype.h"
// 	egPrototype();

	//模板模式
// #include "template.h"
// 	egTemplte();

	//单例模式
// #include "singleton.h"
// egSingleton();

	//外观模式
// #include "facade.h"
// 	egFacade();

	//建造者模式
// #include "builder.h"
// 	egBuilder();

	//观察着模式
// #include "observer.h"
// 	egObserver();

	//备忘录模式
// #include "memento.h"
// 	egMemento();

	//状态模式
// #include "state.h"
// 	egState();

// #include "chain.h"
// 	egChain();

// #include "composite.h"
// 	egComposite();

//egIterator();

// #include "command.h"
// 	egCommand();

// #include "mediator.h"
// 	egMediator();

// #include "flyweight.h"
// 	egFlyWeight();

#include "visitor.h"
	egVisitor();
	
	return 0;
}

